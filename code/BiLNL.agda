module BiLNL where

open import nat renaming (_+_ to _+‚Ñï_)
open import snoc renaming ([_] to [_]I ; _++_ to _++I_; _::_ to _::I_)
open import list renaming ([_] to [_]C ; _++_ to _++C_; _::_ to _::C_)
open import product hiding (_√ó_)
open import empty
open import unit
open import bool

World : Set
World = ‚Ñï
  
Graph : Set
Graph = Snoc (World ‚àß World)

_‚ü®_‚ü©_ : World ‚Üí Graph ‚Üí World ‚Üí Set
w‚ÇÅ ‚ü® [] ‚ü© w‚ÇÇ = ‚ä•
w‚ÇÅ ‚ü® G ::I (a , b) ‚ü© w‚ÇÇ with a =‚Ñï w‚ÇÅ | b =‚Ñï w‚ÇÇ
w‚ÇÅ ‚ü® G ::I (a , b) ‚ü© w‚ÇÇ | tt | tt = ‚ä§
w‚ÇÅ ‚ü® G ::I (a , b) ‚ü© w‚ÇÇ | _ | _ = ‚ä•

worldInGr : World ‚Üí Graph ‚Üí Set
worldInGr w [] = ‚ä•
worldInGr w (G ::I (w‚ÇÅ , w‚ÇÇ)) with w =‚Ñï w‚ÇÅ | w =‚Ñï w‚ÇÇ
... | tt | _ = ‚ä§
... | _ | tt = ‚ä§
... | _ | _ = worldInGr w G

_=W_ : World ‚Üí World ‚Üí Set
w‚ÇÅ =W w‚ÇÇ with w‚ÇÅ =‚Ñï w‚ÇÇ
... | tt = ‚ä§
... | ff = ‚ä•

mutual
  -- Intuitionistic formulas:
  data I-Form : Set where
    True : I-Form
    _√ó_ : I-Form ‚Üí I-Form ‚Üí I-Form
    _‚áí_ : I-Form ‚Üí I-Form ‚Üí I-Form
    G   : BiL-Form ‚Üí I-Form

  -- Co-intuitionistic formulas:
  data C-Form : Set where
    False : C-Form
    _+_ : C-Form ‚Üí C-Form ‚Üí C-Form
    _‚â∫_ : C-Form ‚Üí C-Form ‚Üí C-Form
    H   : BiL-Form ‚Üí C-Form

  -- Bi-intuitionistic Linear Formulas:
  data BiL-Form : Set where
    I : BiL-Form
    J : BiL-Form
    _‚äó_ : BiL-Form ‚Üí BiL-Form ‚Üí BiL-Form
    _‚äï_ : BiL-Form ‚Üí BiL-Form ‚Üí BiL-Form
    _‚ä∏_ : BiL-Form ‚Üí BiL-Form ‚Üí BiL-Form
    _‚â∫L_ : BiL-Form ‚Üí BiL-Form ‚Üí BiL-Form
    
I-Ctx : Set
I-Ctx = Snoc (World ‚àß I-Form)

worldInICtx : World ‚Üí I-Ctx ‚Üí Set
worldInICtx = inPairSnocFst _=‚Ñï_

C-Ctx : Set
C-Ctx = ùïÉ (World ‚àß C-Form)

worldInCCtx : World ‚Üí C-Ctx ‚Üí Set
worldInCCtx w [] = ‚ä•
worldInCCtx w ((a , b) ::C c) with w =‚Ñï a
... | tt = ‚ä§
... | ff = ‚ä•

BiL-Ctx : Set
BiL-Ctx = Snoc (World ‚àß BiL-Form)

worldInBiLCtx : World ‚Üí BiL-Ctx ‚Üí Set
worldInBiLCtx = inPairSnocFst _=‚Ñï_

mutual
  -- Intuitionistic fragment of BiLNL logic:
  data ‚ü®_‚ü©_‚ä¢I_ : Graph ‚Üí I-Ctx ‚Üí (World ‚àß I-Form) ‚Üí Set where
    I-RL : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w1 w2 : World}{Y : I-Form}
      ‚Üí ‚ü® Gr ::I (w1 , w1) ‚ü© Œò ‚ä¢I (w2 , Y)
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w2 , Y)

    I-TS : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ w‚ÇÉ w : World}{Y : I-Form}
      ‚Üí w‚ÇÅ ‚ü® Gr ‚ü© w‚ÇÇ
      ‚Üí w‚ÇÇ ‚ü® Gr ‚ü© w‚ÇÉ
      ‚Üí ‚ü® Gr ::I (w‚ÇÅ , w‚ÇÉ) ‚ü© Œò ‚ä¢I (w , Y)
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w , Y)

    I-ID : ‚àÄ{Gr : Graph}{w : World}{Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© [ (w , Y) ]I ‚ä¢I (w , Y)

    I-Cut : ‚àÄ{Gr : Graph}{Œò‚ÇÅ Œò‚ÇÇ : I-Ctx}{w‚ÇÇ w‚ÇÅ : World}{X Z : I-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò‚ÇÇ ‚ä¢I (w‚ÇÇ , X)
      ‚Üí ‚ü® Gr ‚ü© (Œò‚ÇÅ ::I (w‚ÇÇ , X)) ‚ä¢I (w‚ÇÅ , Z)
      ‚Üí ‚ü® Gr ‚ü© (Œò‚ÇÅ ++I Œò‚ÇÇ) ‚ä¢I (w‚ÇÅ , Z)

    I-WK : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{X Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w‚ÇÅ , Y)
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÇ , X)) ‚ä¢I (w‚ÇÅ , Y)

    I-CR : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{X Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÇ , X) ::I (w‚ÇÇ , X)) ‚ä¢I (w‚ÇÅ , Y)
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÇ , X)) ‚ä¢I (w‚ÇÅ , Y)

    I-EX : ‚àÄ{Gr : Graph}{Œò‚ÇÅ Œò‚ÇÇ : I-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{X Y Z : I-Form}
      ‚Üí ‚ü® Gr ‚ü© ((Œò‚ÇÅ ::I (w‚ÇÇ , Y) ::I (w‚ÇÅ , X)) ++I Œò‚ÇÇ) ‚ä¢I (w , Z)
      ‚Üí ‚ü® Gr ‚ü© ((Œò‚ÇÅ ::I (w‚ÇÅ , X) ::I (w‚ÇÇ , Y)) ++I Œò‚ÇÇ) ‚ä¢I (w , Z)

    I-ML : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{X Y : I-Form}
      ‚Üí w‚ÇÅ ‚ü® Gr ‚ü© w‚ÇÇ
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÅ , X) ::I (w‚ÇÇ , X)) ‚ä¢I (w , Y)
      ‚Üí ‚ü® Gr ‚ü© ((Œò ::I (w‚ÇÅ , X))) ‚ä¢I (w , Y)

    I-MR : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{Y : I-Form}
      ‚Üí w‚ÇÇ ‚ü® Gr ‚ü© w‚ÇÅ
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w‚ÇÇ , Y)
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w‚ÇÅ , Y)

    I-TL : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w‚ÇÅ , Y)
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÇ , True)) ‚ä¢I (w‚ÇÅ , Y)

    I-TR : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w : World}{Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w , True)

    I-PL : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{X Y Z : I-Form}
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÅ , X) ::I (w‚ÇÅ , Y)) ‚ä¢I (w‚ÇÇ , Z)
      ‚Üí ‚ü® Gr ‚ü© (Œò ::I (w‚ÇÅ , X √ó Y)) ‚ä¢I (w‚ÇÇ , Z)

    I-PR : ‚àÄ{Gr : Graph}{Œò‚ÇÅ Œò‚ÇÇ : I-Ctx}{w : World}{X Y : I-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò‚ÇÅ ‚ä¢I (w , X)
      ‚Üí ‚ü® Gr ‚ü© Œò‚ÇÇ ‚ä¢I (w , Y)
      ‚Üí ‚ü® Gr ‚ü© (Œò‚ÇÅ ++I Œò‚ÇÇ) ‚ä¢I (w , X √ó Y)

    I-IL : ‚àÄ{Gr : Graph}{Œò‚ÇÅ Œò‚ÇÇ : I-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{X Y Z : I-Form}
      ‚Üí w‚ÇÅ ‚ü® Gr ‚ü© w‚ÇÇ
      ‚Üí ‚ü® Gr ‚ü© Œò‚ÇÇ ‚ä¢I (w‚ÇÇ , X)
      ‚Üí ‚ü® Gr ‚ü© (Œò‚ÇÅ ::I (w‚ÇÇ , Y)) ‚ä¢I (w , Z)
      ‚Üí ‚ü® Gr ‚ü© (Œò‚ÇÅ ++I Œò‚ÇÇ ::I (w‚ÇÅ , X ‚áí Y)) ‚ä¢I (w , Z)

    I-IR : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w‚ÇÅ w‚ÇÇ : World}{X Y : I-Form}
      ‚Üí ((worldInGr w‚ÇÇ Gr) ‚Üí ‚ä•)
      ‚Üí ((worldInICtx w‚ÇÇ Œò) ‚Üí ‚ä•)
      ‚Üí ((w‚ÇÅ =W w‚ÇÇ) ‚Üí ‚ä•)
      ‚Üí ‚ü® Gr ::I (w‚ÇÅ , w‚ÇÇ) ‚ü© (Œò ::I (w‚ÇÇ , X)) ‚ä¢I (w‚ÇÇ , Y)
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w‚ÇÅ , X ‚áí Y)

    I-GR : ‚àÄ{Gr : Graph}{Œò : I-Ctx}{w : World}{A : BiL-Form}
      ‚Üí ‚ü® Gr ‚ü© Œò ‚à£ [] ‚ä¢LL [ (w , A) ]I ‚à£ []
      ‚Üí ‚ü® Gr ‚ü© Œò ‚ä¢I (w , (G A)) 

  -- Co-intuitionistic fragment of BiLNL logic:
  data ‚ü®_‚ü©_‚ä¢C_ : Graph ‚Üí (World ‚àß C-Form) ‚Üí C-Ctx ‚Üí Set where
    C-RL : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S : C-Form}
      ‚Üí ‚ü® Gr ::I (w‚ÇÅ , w‚ÇÅ) ‚ü© (w‚ÇÇ , S) ‚ä¢C Œ®
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÇ , S) ‚ä¢C Œ®

    C-TS : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ w‚ÇÉ w : World}{S : C-Form}
      ‚Üí w‚ÇÅ ‚ü® Gr ‚ü© w‚ÇÇ
      ‚Üí w‚ÇÇ ‚ü® Gr ‚ü© w‚ÇÉ
      ‚Üí ‚ü® Gr ::I (w‚ÇÅ , w‚ÇÉ) ‚ü© (w , S) ‚ä¢C Œ®
      ‚Üí ‚ü® Gr ‚ü© (w , S) ‚ä¢C Œ®

    C-ID : ‚àÄ{Gr : Graph}{w : World}{S : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w , S) ‚ä¢C [ (w , S) ]C

    C-Cut : ‚àÄ{Gr : Graph}{Œ®‚ÇÅ Œ®‚ÇÇ : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C ((w‚ÇÇ , T) ::C Œ®‚ÇÇ)
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÇ , T) ‚ä¢C Œ®‚ÇÅ      
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C (Œ®‚ÇÅ ++C Œ®‚ÇÇ)

    C-WK : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C Œ®
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C ((w‚ÇÇ , T) ::C Œ®)

    C-CR : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C ((w‚ÇÇ , T) ::C (w‚ÇÇ , T) ::C Œ®)
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C ((w‚ÇÇ , T) ::C Œ®)

    C-EX : ‚àÄ{Gr : Graph}{Œ®‚ÇÅ Œ®‚ÇÇ : C-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{R S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w , R) ‚ä¢C (Œ®‚ÇÅ ++C (w‚ÇÅ , S) ::C (w‚ÇÇ , T) ::C Œ®‚ÇÇ)
      ‚Üí ‚ü® Gr ‚ü© (w , R) ‚ä¢C (Œ®‚ÇÅ ++C (w‚ÇÇ , T) ::C (w‚ÇÅ , S) ::C Œ®‚ÇÇ)

    C-ML : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S : C-Form}
      ‚Üí w‚ÇÅ ‚ü® Gr ‚ü© w‚ÇÇ
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÇ , S) ‚ä¢C Œ®
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C Œ®

    C-MR : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{S T : C-Form}
      ‚Üí w‚ÇÇ ‚ü® Gr ‚ü© w‚ÇÅ
      ‚Üí ‚ü® Gr ‚ü© (w , S) ‚ä¢C ((w‚ÇÇ , T) ::C (w‚ÇÅ , T) ::C Œ®)
      ‚Üí ‚ü® Gr ‚ü© (w , S) ‚ä¢C ((w‚ÇÅ , T) ::C Œ®)

    C-FL : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w : World}
      ‚Üí ‚ü® Gr ‚ü© (w , False) ‚ä¢C Œ®

    C-FR : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C Œ®
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S) ‚ä¢C ((w‚ÇÇ , False) ::C Œ®)

    C-DL : ‚àÄ{Gr : Graph}{Œ®‚ÇÅ Œ®‚ÇÇ : C-Ctx}{w : World}{S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w , S) ‚ä¢C Œ®‚ÇÅ
      ‚Üí ‚ü® Gr ‚ü© (w , T) ‚ä¢C Œ®‚ÇÇ
      ‚Üí ‚ü® Gr ‚ü© (w , S + T) ‚ä¢C (Œ®‚ÇÅ ++C Œ®‚ÇÇ)

    C-DR : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{R S T : C-Form}
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , R) ‚ä¢C ((w‚ÇÇ , S) ::C (w‚ÇÇ , T) ::C Œ®)
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , R) ‚ä¢C ((w‚ÇÇ , S + T) ::C Œ®)

    C-SL : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w‚ÇÅ w‚ÇÇ : World}{S T : C-Form}
      ‚Üí ((worldInGr w‚ÇÇ Gr) ‚Üí ‚ä•)
      ‚Üí ((worldInCCtx w‚ÇÇ Œ®) ‚Üí ‚ä•)
      ‚Üí ((w‚ÇÅ =W w‚ÇÇ) ‚Üí ‚ä•)
      ‚Üí ‚ü® Gr ::I (w‚ÇÇ , w‚ÇÅ) ‚ü© (w‚ÇÇ , S) ‚ä¢C ((w‚ÇÇ , T) ::C Œ®)
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÅ , S ‚â∫ T) ‚ä¢C Œ®

    C-SR : ‚àÄ{Gr : Graph}{Œ®‚ÇÅ Œ®‚ÇÇ : C-Ctx}{w‚ÇÅ w‚ÇÇ w : World}{R S T : C-Form}
      ‚Üí w‚ÇÇ ‚ü® Gr ‚ü© w‚ÇÅ
      ‚Üí ‚ü® Gr ‚ü© (w , R) ‚ä¢C ((w‚ÇÇ , S) ::C Œ®‚ÇÇ)
      ‚Üí ‚ü® Gr ‚ü© (w‚ÇÇ , T) ‚ä¢C Œ®‚ÇÅ
      ‚Üí ‚ü® Gr ‚ü© (w , R) ‚ä¢C ((w‚ÇÅ , S ‚â∫ T) ::C Œ®‚ÇÅ ++C Œ®‚ÇÇ)

    C-HL : ‚àÄ{Gr : Graph}{Œ® : C-Ctx}{w : World}{A : BiL-Form}
      ‚Üí ‚ü® Gr ‚ü© [] ‚à£ [ (w , A) ]I ‚ä¢LL [] ‚à£ Œ®
      ‚Üí ‚ü® Gr ‚ü© (w , H A) ‚ä¢C Œ®

  -- Linear Core of BiLNL logic:
  data ‚ü®_‚ü©_‚à£_‚ä¢LL_‚à£_ : Graph ‚Üí I-Ctx ‚Üí BiL-Ctx ‚Üí BiL-Ctx ‚Üí C-Ctx ‚Üí Set where
